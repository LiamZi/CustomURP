#ifndef __SHADER_LIBRARY_COMPUTE_SHADER_TERRAIN_BUILDER_COMPUTE__
#define __SHADER_LIBRARY_COMPUTE_SHADER_TERRAIN_BUILDER_COMPUTE__

#pragma kernel TraverseQuadTree
#pragma kernel BuildLodMap
#pragma kernel BuildPatches

#pragma multi_compile_local _ _REVERSE_Z
#pragma multi_compile_local _ _ENABLE_FRUSTUM_CULL
#pragma multi_compile_local _ _ENABLE_HIZ_CULL
#pragma multi_compile_local _ _BOUNDS_DEBUG
#pragma multi_compile_local _ _ENABLE_SEAM

#include "ComputeCommon.hlsl"
#include "../TerrainInput.hlsl"

Texture2D<float4> _MinMaxHeightTexture;
Texture2D<float4> _HeightMap;
RWTexture2D<float4> _LodMap;

ConsumeStructuredBuffer<uint2> _ConsumeNodeList;
AppendStructuredBuffer<uint2> _AppendNodeList;
AppendStructuredBuffer<uint2> _AppendFinalNodeList;
StructuredBuffer<uint3> _FinalNodeList;

RWStructuredBuffer<NodeDescriptor> _NodeDescriptors;

uint _PassLod;
float3 _CameraPositionWS;
float3 _WorldSize;
float4 _WorldLodParams[6];
uint _NodeIDOffsetOfLOD[6];
int _BoundsHeightRedundace;
float4 _NodeEvaluationC;

float4 _CameraFrustumPlanes[6];

float GetNodeSize(uint lod)
{
    return _WorldLodParams[lod].x;
}

float GetPatchExtent(uint lod)
{
    return _WorldLodParams[lod].y;
}

float GetNodeCount(uint lod)
{
    return _WorldLodParams[lod].z;
}

uint GetSectorCountPerNode(uint lod)
{
    return (uint)_WorldLodParams[lod].w;
}

float2 GetNodePositionWSV2(uint2 node, uint lod)
{
    float nodeMeterSize = GetNodeSize(lod);
    float nodeCount = GetNodeCount(lod);
    float2 nodePositionWS = ((float2)node - (nodeCount - 1) * 0.5) * nodeMeterSize;
    return nodePositionWS;
}

float3 GetNodePositionWS(uint2 node, uint lod)
{
    float2 nodePositionWS = GetNodePositionWSV2(node, lod);
    float2 minMaxHeight = _MinMaxHeightTexture.mips[lod + 3][node].xy;
    float y = (minMaxHeight.x + minMaxHeight.y) * 0.5 * _WorldSize.y;
    return float3(nodePositionWS.x, y, nodePositionWS.y);
}

bool EvaluateNode(uint2 node, uint lod)
{
    float3 positionWS = GetNodePositionWS(node, lod);
    float dis = distance(_CameraPositionWS, positionWS);
    float nodeSize = GetNodeSize(lod);
    float f = dis / (nodeSize * _NodeEvaluationC.x);
    if(f < 1)
    {
        return true;
    }

    return false;
}



uint GetNodeId(uint3 nodeLoc)
{
    return _NodeIDOffsetOfLOD[nodeLoc.z] + nodeLoc.y * GetNodeCount(nodeLoc.z) + nodeLoc.x;
}

uint GetNodeId(uint2 nodeLoc, uint mip)
{
    return GetNodeId(uint3(nodeLoc, mip));
}

[numthreads(1, 1, 1)]
void TraverseQuadTree(CSInput input)
{
    uint2 nodeLoc = _ConsumeNodeList.Consume();
    uint nodeId = GetNodeId(nodeLoc, _PassLod);
    NodeDescriptor desc = _NodeDescriptors[nodeId];
    
    if(_PassLod > 0 && EvaluateNode(nodeLoc, _PassLod))
    {
        _AppendNodeList.Append(nodeLoc * 2);
        _AppendNodeList.Append(nodeLoc * 2 + uint2(1, 0));
        _AppendNodeList.Append(nodeLoc * 2 + uint2(0, 1));
        _AppendNodeList.Append(nodeLoc * 2 + uint2(1, 1));
        desc.branch = 1;
    }
    else
    {
        _AppendFinalNodeList.Append(uint3(nodeLoc, _PassLod));
        desc.branch = 0;
    }

    _NodeDescriptors[nodeId] = desc;
}



[numthreads(8, 8, 1)]
void BuildLodMap(CSInput input)
{
    uint2 sectorLoc = input.dispatchThreadID.xy;
    
    [UNITY_UNROLL]
    for(uint lod = MAX_TERRAIN_LOD; lod >= 0; lod--)
    {
        uint sectorCount = GetSectorCountPerNode(lod);
        uint2 node = sectorLoc / sectorCount;
        uint nodeId = GetNodeId(node, lod);
        NodeDescriptor desc = _NodeDescriptors[nodeId];
        if(desc.branch == 0)
        {
            _LodMap[sectorLoc] = lod * 1.0 / MAX_TERRAIN_LOD;
            return;
        }
    }
    _LodMap[sectorLoc] = 0;
}

RenderPatch CreatePath(uint3 node, uint2 patchOffset)
{
    uint lod = node.z;
    float nodeMeterSize = GetNodeSize(lod);
    float patchMeterSize = nodeMeterSize / PATCH_COUNT_PER_NODE;
    float2 nodePositionWS = GetNodePositionWSV2(node.xy, lod);

    uint patchLoc = node.xy * PATCH_COUNT_PER_NODE + patchOffset;
    float2 minMaxHeight = _MinMaxHeightTexture.mips[lod][patchLoc].rg * _WorldSize.y + float2(-_BoundsHeightRedundace, _BoundsHeightRedundace);
    RenderPatch patch;
    patch.lod = lod;
    patch.position = nodePositionWS + (patchOffset - (PATCH_COUNT_PER_NODE - 1) * 0.5) * patchMeterSize;
    patch.minMaxHeight = minMaxHeight;
    patch.lodTrans = 0;
    return patch;
}

Bounds GetPatchBounds(RenderPatch patch)
{
    float halfSize = GetPatchExtent(patch.lod);
#if _ENABLE_SEAM
    halfSize *= 0.9;
#endif
    Bounds bounds;
    float3 boundsMin, boundsMax;
    boundsMin.xz = patch.position - halfSize;
    boundsMax.xz = patch.position + halfSize;
    boundsMin.y = patch.minMaxHeight.y;
    boundsMax.y = patch.minMaxHeight.y;

    bounds.min = boundsMin;
    bounds.max = boundsMax;
    return bounds;
}

bool IsOutSidePlane(float4 plane, float3 pos)
{
    return dot(plane.xyz, pos) + plane.w < 0;
}

bool IsAABBOutSidePlane(float4 plane, float3 min, float3 max)
{
    return IsOutSidePlane(plane, min) &&
        IsOutSidePlane(plane, max) &&
                IsOutSidePlane(plane, float3(min.x, min.y, max.z)) &&
                    IsOutSidePlane(plane, float3(min.x, max.y, min.z)) &&
                        IsOutSidePlane(plane, float3(min.x, max.y, max.z)) &&
                            IsOutSidePlane(plane, float3(max.x, min.y, max.z)) &&
                                IsOutSidePlane(plane, float3(max.x, max.y, min.z)) &&
                                    IsOutSidePlane(plane, float3(max.x, min.y, min.z));
            
    
}

bool IsBoundsOutSidePlane(float4 plane, Bounds bounds)
{
    return IsAABBOutSidePlane(plane, bounds.min, bounds.max);
}

bool FrustumCull(float4 planes[6], Bounds bounds)
{
    return IsBoundsOutSidePlane(planes[0], bounds) ||
        IsBoundsOutSidePlane(planes[1], bounds) ||
            IsBoundsOutSidePlane(planes[2], bounds) ||
                IsBoundsOutSidePlane(planes[3], bounds) ||
                    IsBoundsOutSidePlane(planes[4], bounds) ||
                        IsBoundsOutSidePlane(planes[5], bounds);
                
}

bool HizOcclusionCull(Bounds bounds)
{
    
}


bool Cull(Bounds bounds)
{
#if _ENABLE_FRUSTUM_CULL
    if(FrustumCull(_CameraFrustumPlanes, bounds))
    {
        return true;
    }
#endif

#if _ENABLE_HIZ_CULL
    if(HizOcclusionCull(bounds))
    {
        return true;
    }
#endif
    return false;
}

[numthreads(8, 8, 1)]
void BuildPatches(CSInput input)
{
    uint3 nodeLoc = _FinalNodeList[input.groupID.x];
    uint2 patchOffset = input.groupThreadID.xy;

    RenderPatch patch = CreatePath(nodeLoc, patchOffset);

    Bounds bounds = GetPatchBounds(patch);
    if(Cull(bounds))
    {
        return;
    }
    
}

#endif