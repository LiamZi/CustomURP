// Each #kernel tells which function to compile; you can have many kernels
#ifndef __SHADER_LIBRARY_COMPUTE_SHADER_CLUSTER_COMPUTE__
#define __SHADER_LIBRARY_COMPUTE_SHADER_CLUSTER_COMPUTE__

#pragma enable_d3d11_debug_symbols

#pragma kernel ClusterGridBuild
#pragma kernel GridLightBuild

#pragma exclude_renderers d3d9
#pragma exclude_renderers d3d11_9x

#include "ComputeCommon.hlsl"
#include "ClusterData.hlsl"


[numthreads(CLUSTER_GRID_BUILD_NUMTHREADS_X, CLUSTER_GRID_BUILD_NUMTHREADS_Y, LIGHTING_CLUSTER_Z_SLICE)]
void ClusterGridBuild (CSInput input)
{

    uint batch = _cluster_Data.x / CLUSTER_GRID_BUILD_NUMTHREADS_X;
    uint gridIndex = GridPos2GridIndex(input.dispatchThreadID);
    //
    float tileNear = -_cluster_zNear * pow(_cluster_zFar / _cluster_zNear, input.dispatchThreadID.z / (float) LIGHTING_CLUSTER_Z_SLICE);
    float tileFar = -_cluster_zNear * pow(_cluster_zFar / _cluster_zNear, (input.dispatchThreadID.z + 1) / (float)LIGHTING_CLUSTER_Z_SLICE);
    //
    float4 minPoint = float4((input.dispatchThreadID.xy / _cluster_Data.xy), tileNear, 1.0);
    float4 maxPoint = float4((input.dispatchThreadID.xy + 1) / _cluster_Data.xy, tileFar, 1.0);
    //
    _cluster_Grid_RW[gridIndex].minPoint = minPoint;
    _cluster_Grid_RW[gridIndex].maxPoint = maxPoint;
}



[numthreads(CLUSTER_GRID_BUILD_NUMTHREADS_X, CLUSTER_GRID_BUILD_NUMTHREADS_Y, LIGHTING_CLUSTER_Z_SLICE)]
void GridLightBuild(CSInput input)
{
    uint gridIndex = GridPos2GridIndex(input.dispatchThreadID);
    uint visibleLightCount = 0;
    uint visibleLightIndices[CLUSTER_MAX_LIGHTS_COUNT];

    UNITY_LOOP
    for(uint i = 0; i < _clusterLightCount; i++)
    {
        if(LightGridIntersection(i, gridIndex))
        {
            visibleLightIndices[visibleLightCount] = i;
            visibleLightCount++;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    uint offset;
    InterlockedAdd(lightIndexOffset, visibleLightCount, offset);

    UNITY_LOOP
    for(uint index = 0; index < visibleLightCount; index++)
    {
        _cluster_LightIndex_RW[offset + index] = visibleLightIndices[index];
    }

    uint val =  EncodeLightIndex(offset, visibleLightCount);
    _cluster_GridIndex_RW[gridIndex] = val;
}

#endif